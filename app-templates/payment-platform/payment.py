import random
import string

ALL_GOOD = 0
ERR_NOT_LOGGED_IN = 1
ERR_INVALID_USER = 2
ERR_INSUFFICIENT_FUNDS = 3
ERR_INVALID_DOLLAR_AMT = 4
ERR_BAD_CREDENTIALS = 5

def random_session_key():
    return ''.join(random.choice(string.ascii_lowercase) for i in range(30))

def get_balance(uid, con):
    res = con.execute("SELECT balance FROM users WHERE id=?;", (uid,))
    match = res.fetchone()
    return round(float(match[0]), 2)

def get_user(uid, con):
    res = con.execute("SELECT * FROM users WHERE id=?;", (uid,))
    match = res.fetchone()
    return match

def get_all_users(con):
    res = con.execute("SELECT id, username FROM users;")
    return res.fetchall()

def get_pay_history(uid, con):
    res = con.execute("SELECT * FROM transactions WHERE sender=? OR receiver=? ORDER BY timestamp DESC;", (uid, uid,))
    transactions = res.fetchall()
    return transactions

def get_total_money(con):
    total_money = con.execute("SELECT SUM(balance) FROM users;").fetchone()[0]
    total_money = round(total_money, 2)
    return total_money

def get_total_users(con):
    return con.execute("SELECT COUNT(*) FROM users;").fetchone()[0]

def set_balance(uid, newbal, con):
    con.execute("UPDATE users SET balance=? WHERE id=?;", (newbal, uid))

def user_exists(uid, con):
    res = con.execute("SELECT * FROM users WHERE id=?;", (uid,))
    return (res.fetchone() != None)

def try_user_login(username, passwd, sesskey, con):
    res = con.execute("SELECT id FROM users WHERE username=? AND password=?;", (username, passwd,))
    match = res.fetchone()
    if match == None:
        return ERR_BAD_CREDENTIALS

    uid = match[0]
    con.execute("UPDATE users SET session_key=? WHERE id=?;", (sesskey, uid,))
    con.commit()
    return ALL_GOOD

def validate_user_session_key(session_key_string, con):
    res = con.execute("SELECT id FROM users WHERE session_key=?;", (session_key_string,))
    match = res.fetchone()
    if match == None:
        return ERR_NOT_LOGGED_IN
    return ALL_GOOD

def get_user_with_session(session_key_string, con):
    res = con.execute("SELECT id FROM users WHERE session_key=?;", (session_key_string,))
    match = res.fetchone()
    return match[0]

def validate_user_id_string(uid_string, con):
    uid = 0
    try:
        uid = int(uid_string)
    except:
        return ERR_INVALID_USER
    if not user_exists(uid, con):
        return ERR_INVALID_USER
    return ALL_GOOD

def validate_transfer_amt_string(sid, amt_string, con):
    amt = 0
    try:
        amt = float(amt_string)
    except:
        return ERR_INVALID_DOLLAR_AMT
    if amt <= 0:
        return ERR_INVALID_DOLLAR_AMT

    balance = get_balance(sid, con)
    if balance < amt:
        return ERR_INSUFFICIENT_FUNDS
    
    return ALL_GOOD

def execute_transaction(sid, rid_string, amt_string, text, con):
    rid_string_valid = validate_user_id_string(rid_string, con)
    amt_string_valid = validate_transfer_amt_string(sid, amt_string, con)
    if not rid_string_valid == ALL_GOOD:
        return rid_string_valid
    if not amt_string_valid == ALL_GOOD:
        return amt_string_valid

    rid = int(rid_string)
    amt = round(float(amt_string), 2)

    sbal = get_balance(sid, con)
    rbal = get_balance(rid, con)
    set_balance(sid, sbal-amt, con)
    set_balance(rid, rbal+amt, con)
    con.execute("INSERT into transactions (sender, receiver, amount, reason) VALUES (?, ?, ?, ?);", (sid, rid, amt, text))
    con.commit()

    return ALL_GOOD

def generate_error_message(err_code):
    if err_code == ERR_NOT_LOGGED_IN:
        return "You are not logged in."
    elif err_code == ERR_INVALID_USER:
        return "The user you have indicated does not exist."
    elif err_code == ERR_INSUFFICIENT_FUNDS:
        return "You do not have sufficient funds."
    elif err_code == ERR_INVALID_DOLLAR_AMT:
        return "You have entered an invalid dollar amount."
    elif err_code == ERR_BAD_CREDENTIALS:
        return "Invalid credentials."
    else:
        return "Something went wrong."

def random_transactions(count, con):
    n = int(con.execute("SELECT COUNT(*) FROM users;").fetchone()[0])
    with open("message_examples.txt", 'r') as f:
        comments = f.read().splitlines()
        chosen_comments = random.choices(comments, k=count)
        for i in range(count):
            sid = random.randint(1, n)
            rid = random.randint(1, n-1)
            if rid >= sid:
                rid += 1
            sbal = get_balance(sid, con)
            payment = int(random.random() * sbal * 10)/20
            execute_transaction(sid, rid, payment, chosen_comments[i], con)
