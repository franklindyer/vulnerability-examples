from flask import Flask, render_template, request, make_response, send_from_directory, url_for
import sqlite3
import wikipedia
import sys

from payment import *;

def get_db_connection():
    conn = sqlite3.connect('accounts.db')
    conn.row_factory = sqlite3.Row
    return conn

app = Flask(__name__)

@app.route('/css/<path:path>')
def send_css(path):
    return send_from_directory('css', path)

@app.route('/')
def index():
    con = get_db_connection()

    total_money = get_total_money(con)
    total_users = get_total_users(con)
    
    return render_template("index.html", total_money=total_money, total_users=total_users)

@app.route('/login', methods=['POST'])
def login_page():
    con = get_db_connection()

    user = request.form["username"]
    passwd = request.form["password"]
    sesskey = random_session_key()
    login_valid = try_user_login(user, passwd, sesskey, con)
    if not login_valid == ALL_GOOD:
        return generate_error_message(login_valid)

    resp = make_response(render_template("login_success.html"))
    resp.set_cookie('session_key', sesskey)
    return resp

@app.route('/logout')
def logout():
    resp = make_response("You are now logged out!")
    resp.set_cookie('session_key', '')
    return resp

@app.route('/home')
def home_page():
    con = get_db_connection()

    sesskey = request.cookies.get('session_key')
    sesskey_valid = validate_user_session_key(sesskey, con)
    if not sesskey_valid == ALL_GOOD:
        return generate_error_message(sesskey_valid)
    uid = get_user_with_session(sesskey, con)

    user = get_user(uid, con)
    user_list = get_all_users(con)
    pay_history = get_pay_history(uid, con)

    return render_template("home.html", user=user, user_list=user_list, pay_history=pay_history)

@app.route('/pay', methods=['POST'])
def pay_form():
    con = get_db_connection()
    
    sesskey = request.cookies.get('session_key')
    sesskey_valid = validate_user_session_key(sesskey, con)
    if not sesskey_valid == ALL_GOOD:
        return generate_error_message(sesskey_valid)
    sid = get_user_with_session(sesskey, con)

    rid_string = request.form["recipient"]
    amt_string = request.form["amount"]
    reason = request.form["reason"]

    transaction_valid = execute_transaction(sid, rid_string, amt_string, reason, con)
    if not transaction_valid == ALL_GOOD:
        return generate_error_message(transaction_valid)
    return "Transaction complete!"

app.run(host='0.0.0.0')
