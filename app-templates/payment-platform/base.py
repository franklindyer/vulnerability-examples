import random
import string

def random_session_key():
    return ''.join(random.choice(string.ascii_lowercase) for i in range(30))

def get_balance(uid, cur):
    res = cur.execute("SELECT balance FROM users WHERE id=?;", (uid,))
    match = res.fetchone()
    return float(match[0])

def set_balance(uid, newbal, cur):
    cur.execute("UPDATE users SET balance=? WHERE id=?;", (newbal, uid))

def validate_user(uid, cur):
    res = cur.execute("SELECT * FROM users WHERE id=?;", (uid,))
    return (res.fetchone() != None)

def validate_transaction(sid, rid, amt, cur):
    sbal = get_balance(sid, cur)
    if sbal < amt:
        return False
    else:
        return True

def execute_transaction(sid, rid, amt, text, cur):
    if not validate_transaction(sid, rid, amt, cur):
        return False
    sbal = get_balance(sid, cur)
    rbal = get_balance(rid, cur)
    set_balance(sid, sbal-amt, cur)
    set_balance(rid, rbal+amt, cur)
    cur.execute("INSERT into transactions (sender, receiver, amount, reason) VALUES (?, ?, ?, ?);", (sid, rid, amt, text))
    cur.commit()
    return True

def random_transactions(count, cur):
    n = int(cur.execute("SELECT COUNT(*) FROM users;").fetchone()[0])
    with open("message_examples.txt", 'r') as f:
        comments = f.read().splitlines()
        chosen_comments = random.choices(comments, k=count)
        for i in range(count):
            sid = random.randint(1, n)
            rid = random.randint(1, n-1)
            if rid >= sid:
                rid += 1
            sbal = get_balance(sid, cur)
            payment = int(random.random() * sbal * 10)/20
            execute_transaction(sid, rid, payment, chosen_comments[i], cur)
